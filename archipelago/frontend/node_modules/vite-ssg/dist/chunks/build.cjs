'use strict';

const path = require('path');
const module$1 = require('module');
const PQueue = require('p-queue');
const kolorist = require('kolorist');
const fs = require('fs-extra');
const vite = require('vite');
const JSDOM = require('jsdom');
const state = require('./state.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

const PQueue__default = /*#__PURE__*/_interopDefaultLegacy(PQueue);
const fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);

function renderPreloadLinks(document, modules, ssrManifest) {
  const seen = /* @__PURE__ */ new Set();
  const preloadLinks = [];
  Array.from(modules).forEach((id) => {
    const files = ssrManifest[id] || [];
    files.forEach((file) => {
      if (!preloadLinks.includes(file))
        preloadLinks.push(file);
    });
  });
  if (preloadLinks) {
    preloadLinks.forEach((file) => {
      if (!seen.has(file)) {
        seen.add(file);
        renderPreloadLink(document, file);
      }
    });
  }
}
function renderPreloadLink(document, file) {
  if (file.endsWith(".js")) {
    appendLink(document, {
      rel: "modulepreload",
      crossOrigin: "",
      href: file
    });
  } else if (file.endsWith(".css")) {
    appendLink(document, {
      rel: "stylesheet",
      href: file
    });
  }
}
const createLink = (document) => document.createElement("link");
const setAttrs = (el, attrs) => {
  const keys = Object.keys(attrs);
  for (const key of keys)
    el.setAttribute(key, attrs[key]);
};
function appendLink(document, attrs) {
  const exits = document.head.querySelector(`link[href='${attrs.file}']`);
  if (exits)
    return;
  const link = createLink(document);
  setAttrs(link, attrs);
  document.head.appendChild(link);
}

function buildLog(text, count) {
  console.log(`
${kolorist.gray("[vite-ssg]")} ${kolorist.yellow(text)}${count ? kolorist.blue(` (${count})`) : ""}`);
}
function getSize(str) {
  return `${(str.length / 1024).toFixed(2)} KiB`;
}
function routesToPaths(routes) {
  if (!routes)
    return ["/"];
  const paths = /* @__PURE__ */ new Set();
  const getPaths = (routes2, prefix = "") => {
    prefix = prefix.replace(/\/$/g, "");
    for (const route of routes2) {
      let path = route.path;
      if (route.path) {
        path = prefix && !route.path.startsWith("/") ? `${prefix}/${route.path}` : route.path;
        paths.add(path);
      }
      if (Array.isArray(route.children))
        getPaths(route.children, path);
    }
  };
  getPaths(routes);
  return [...paths];
}

async function getCritters(outDir, options = {}) {
  try {
    const CrittersClass = (await import('critters')).default;
    return new CrittersClass({
      path: outDir,
      logLevel: "warn",
      external: true,
      inlineFonts: true,
      preloadFonts: true,
      ...options
    });
  } catch (e) {
    return void 0;
  }
}

function DefaultIncludedRoutes(paths, routes) {
  return paths.filter((i) => !i.includes(":") && !i.includes("*"));
}
async function build(cliOptions = {}, viteConfig = {}) {
  const mode = process.env.MODE || process.env.NODE_ENV || cliOptions.mode || "production";
  const config = await vite.resolveConfig(viteConfig, "build", mode);
  const cwd = process.cwd();
  const root = config.root || cwd;
  const ssgOut = path.join(root, ".vite-ssg-temp");
  const outDir = config.build.outDir || "dist";
  const out = path.isAbsolute(outDir) ? outDir : path.join(root, outDir);
  const {
    script = "sync",
    mock = false,
    entry = await detectEntry(root),
    formatting = "none",
    crittersOptions = {},
    includedRoutes: configIncludedRoutes = DefaultIncludedRoutes,
    onBeforePageRender,
    onPageRendered,
    onFinished,
    dirStyle = "flat",
    includeAllRoutes = false,
    format = "esm",
    concurrency = 20,
    rootContainerId = "app"
  } = Object.assign({}, config.ssgOptions || {}, cliOptions);
  if (fs__default.existsSync(ssgOut))
    await fs__default.remove(ssgOut);
  buildLog("Build for client...");
  await vite.build(vite.mergeConfig(viteConfig, {
    build: {
      ssrManifest: true,
      rollupOptions: {
        input: {
          app: path.join(root, "./index.html")
        }
      }
    },
    mode: config.mode
  }));
  if (mock) {
    const { jsdomGlobal } = await import('./jsdomGlobal.cjs');
    jsdomGlobal();
  }
  buildLog("Build for server...");
  process.env.VITE_SSG = "true";
  const ssrEntry = await resolveAlias(config, entry);
  await vite.build(vite.mergeConfig(viteConfig, {
    build: {
      ssr: ssrEntry,
      outDir: ssgOut,
      minify: false,
      cssCodeSplit: false,
      rollupOptions: {
        output: format === "esm" ? {
          entryFileNames: "[name].mjs",
          format: "esm"
        } : {
          entryFileNames: "[name].cjs",
          format: "cjs"
        }
      }
    },
    mode: config.mode
  }));
  const prefix = format === "esm" && process.platform === "win32" ? "file://" : "";
  const ext = format === "esm" ? ".mjs" : ".cjs";
  const serverEntry = path.join(prefix, ssgOut, path.parse(ssrEntry).name + ext);
  const _require = module$1.createRequire((typeof document === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : (document.currentScript && document.currentScript.src || new URL('chunks/build.cjs', document.baseURI).href)));
  const { createApp, includedRoutes: serverEntryIncludedRoutes } = format === "esm" ? await import(serverEntry) : _require(serverEntry);
  const includedRoutes = serverEntryIncludedRoutes || configIncludedRoutes;
  const { routes } = await createApp(false);
  let routesPaths = includeAllRoutes ? routesToPaths(routes) : await includedRoutes(routesToPaths(routes), routes || []);
  routesPaths = Array.from(new Set(routesPaths));
  buildLog("Rendering Pages...", routesPaths.length);
  const critters = crittersOptions !== false ? await getCritters(outDir, crittersOptions) : void 0;
  if (critters)
    console.log(`${kolorist.gray("[vite-ssg]")} ${kolorist.blue("Critical CSS generation enabled via `critters`")}`);
  const ssrManifest = JSON.parse(await fs__default.readFile(path.join(out, "ssr-manifest.json"), "utf-8"));
  let indexHTML = await fs__default.readFile(path.join(out, "index.html"), "utf-8");
  indexHTML = rewriteScripts(indexHTML, script);
  const { renderToString } = await import('vue/server-renderer');
  const queue = new PQueue__default.default({ concurrency });
  for (const route of routesPaths) {
    queue.add(async () => {
      try {
        const appCtx = await createApp(false, route);
        const { app, router, head, initialState, triggerOnSSRAppRendered, transformState = state.serializeState } = appCtx;
        if (router) {
          await router.push(route);
          await router.isReady();
        }
        const transformedIndexHTML = await onBeforePageRender?.(route, indexHTML, appCtx) || indexHTML;
        const ctx = {};
        const appHTML = await renderToString(app, ctx);
        await triggerOnSSRAppRendered?.(route, appHTML, appCtx);
        const renderedHTML = await renderHTML({
          rootContainerId,
          indexHTML: transformedIndexHTML,
          appHTML,
          initialState: transformState(initialState)
        });
        const jsdom = new JSDOM.JSDOM(renderedHTML);
        renderPreloadLinks(jsdom.window.document, ctx.modules || /* @__PURE__ */ new Set(), ssrManifest);
        head?.updateDOM(jsdom.window.document);
        const html = jsdom.serialize();
        let transformed = await onPageRendered?.(route, html, appCtx) || html;
        if (critters)
          transformed = await critters.process(transformed);
        const formatted = await formatHtml(transformed, formatting);
        const relativeRouteFile = `${(route.endsWith("/") ? `${route}index` : route).replace(/^\//g, "")}.html`;
        const filename = dirStyle === "nested" ? path.join(route.replace(/^\//g, ""), "index.html") : relativeRouteFile;
        await fs__default.ensureDir(path.join(out, path.dirname(filename)));
        await fs__default.writeFile(path.join(out, filename), formatted, "utf-8");
        config.logger.info(`${kolorist.dim(`${outDir}/`)}${kolorist.cyan(filename.padEnd(15, " "))}  ${kolorist.dim(getSize(formatted))}`);
      } catch (err) {
        throw new Error(`${kolorist.gray("[vite-ssg]")} ${kolorist.red(`Error on page: ${kolorist.cyan(route)}`)}
${err.stack}`);
      }
    });
  }
  await queue.start().onIdle();
  await fs__default.remove(ssgOut);
  const pwaPlugin = config.plugins.find((i) => i.name === "vite-plugin-pwa")?.api;
  if (pwaPlugin && !pwaPlugin.disabled && pwaPlugin.generateSW) {
    buildLog("Regenerate PWA...");
    await pwaPlugin.generateSW();
  }
  console.log(`
${kolorist.gray("[vite-ssg]")} ${kolorist.green("Build finished.")}`);
  await onFinished?.();
  const waitInSeconds = 15;
  const timeout = setTimeout(() => {
    console.log(`${kolorist.gray("[vite-ssg]")} ${kolorist.yellow(`Build process still running after ${waitInSeconds}s. There might be something misconfigured in your setup. Force exit.`)}`);
    process.exit(0);
  }, waitInSeconds * 1e3);
  timeout.unref();
}
async function detectEntry(root) {
  const scriptSrcReg = /<script(?:.*?)src=["'](.+?)["'](?!<)(?:.*)\>(?:[\n\r\s]*?)(?:<\/script>)/img;
  const html = await fs__default.readFile(path.join(root, "index.html"), "utf-8");
  const scripts = [...html.matchAll(scriptSrcReg)];
  const [, entry] = scripts.find((matchResult) => {
    const [script] = matchResult;
    const [, scriptType] = script.match(/.*\stype=(?:'|")?([^>'"\s]+)/i) || [];
    return scriptType === "module";
  }) || [];
  return entry || "src/main.ts";
}
async function resolveAlias(config, entry) {
  const resolver = config.createResolver();
  const result = await resolver(entry, config.root);
  return result || path.join(config.root, entry);
}
function rewriteScripts(indexHTML, mode) {
  if (!mode || mode === "sync")
    return indexHTML;
  return indexHTML.replace(/<script type="module" /g, `<script type="module" ${mode} `);
}
async function renderHTML({
  rootContainerId,
  indexHTML,
  appHTML,
  initialState
}) {
  const stateScript = initialState ? `
<script>window.__INITIAL_STATE__=${initialState}<\/script>` : "";
  const container = `<div id="${rootContainerId}"></div>`;
  if (indexHTML.includes(container)) {
    return indexHTML.replace(container, `<div id="${rootContainerId}" data-server-rendered="true">${appHTML}</div>${stateScript}`);
  }
  const html5Parser = await import('html5parser');
  const ast = html5Parser.parse(indexHTML);
  let renderedOutput;
  html5Parser.walk(ast, {
    enter: (node) => {
      if (!renderedOutput && node?.type === html5Parser.SyntaxKind.Tag && Array.isArray(node.attributes) && node.attributes.length > 0 && node.attributes.some((attr) => attr.name.value === "id" && attr.value?.value === rootContainerId)) {
        const attributesStringified = [...node.attributes.map(({ name: { value: name }, value }) => `${name}="${value.value}"`)].join(" ");
        const indexHTMLBefore = indexHTML.slice(0, node.start);
        const indexHTMLAfter = indexHTML.slice(node.end);
        renderedOutput = `${indexHTMLBefore}<${node.name} ${attributesStringified} data-server-rendered="true">${appHTML}</${node.name}>${stateScript}${indexHTMLAfter}`;
      }
    }
  });
  if (!renderedOutput)
    throw new Error(`Could not find a tag with id="${rootContainerId}" to replace it with server-side rendered HTML`);
  return renderedOutput;
}
async function formatHtml(html, formatting) {
  if (formatting === "minify") {
    const htmlMinifier = await import('html-minifier');
    return htmlMinifier.minify(html, {
      collapseWhitespace: true,
      caseSensitive: true,
      collapseInlineTagWhitespace: false,
      minifyJS: true,
      minifyCSS: true
    });
  } else if (formatting === "prettify") {
    const prettier = (await import('prettier/esm/standalone.mjs')).default;
    const parserHTML = (await import('prettier/esm/parser-html.mjs')).default;
    return prettier.format(html, { semi: false, parser: "html", plugins: [parserHTML] });
  }
  return html;
}

exports.build = build;

import * as vue from 'vue';
import { App, Ref } from 'vue';
import { Head as Head$1, ReactiveHead } from '@zhead/schema-vue';

interface HandlesDuplicates {
    /**
     * By default, tags which share the same unique key `name, `property` are de-duped. To allow duplicates
     * to be made you can provide a unique key for each entry.
     */
    key?: string;
}
interface RendersToBody {
    /**
     * Render tag at the end of the <body>.
     */
    body?: boolean;
}
interface RendersInnerContent {
    /**
     * Sets the textContent of an element.
     */
    children?: string;
}
interface HasRenderPriority {
    /**
     * The priority for rendering the tag, without this all tags are rendered as they are registered
     * (besides some special tags).
     *
     * The following special tags have default priorities:
     * * -2 <meta charset ...>
     * * -1 <base>
     * * 0 <meta http-equiv="content-security-policy" ...>
     *
     * All other tags have a default priority of 10: <meta>, <script>, <link>, <style>, etc
     *
     * @warn Experimental feature. Only available when rendering SSR
     */
    renderPriority?: number;
}
interface HeadAugmentations {
    base: {
        key?: never;
        renderPriority?: never;
        body?: never;
        children?: never;
    };
    link: HasRenderPriority & RendersToBody & {
        key?: never;
        children?: never;
    };
    meta: HasRenderPriority & HandlesDuplicates & {
        children?: never;
        body?: never;
    };
    style: HasRenderPriority & RendersToBody & RendersInnerContent & {
        key?: never;
    };
    script: HasRenderPriority & RendersToBody & RendersInnerContent & HandlesDuplicates;
    noscript: HasRenderPriority & RendersToBody & RendersInnerContent & {
        key?: never;
    };
    htmlAttrs: {
        renderPriority?: never;
        key?: never;
        children?: never;
        body?: never;
    };
    bodyAttrs: {
        renderPriority?: never;
        key?: never;
        children?: never;
        body?: never;
    };
}
declare type HeadObjectPlain = Head$1<HeadAugmentations>;
declare type HeadObject = ReactiveHead<HeadAugmentations>;
declare type TagKeys = keyof Omit<HeadObjectPlain, "titleTemplate">;

declare type MaybeRef<T> = T | Ref<T>;
declare type HeadAttrs = {
    [k: string]: any;
};
declare type HeadTag = {
    tag: TagKeys;
    props: HandlesDuplicates & HasRenderPriority & RendersToBody & RendersInnerContent & {
        [k: string]: any;
    };
    _position?: number;
};
declare type HeadClient = {
    install: (app: App) => void;
    headTags: HeadTag[];
    addHeadObjs: (objs: Ref<HeadObjectPlain>) => void;
    removeHeadObjs: (objs: Ref<HeadObjectPlain>) => void;
    updateDOM: (document?: Document) => void;
};
interface HTMLResult {
    readonly headTags: string;
    readonly htmlAttrs: string;
    readonly bodyAttrs: string;
    readonly bodyTags: string;
}
/**
 * Inject the head manager instance
 * Exported for advanced usage or library integration, you probably don't need this
 */
declare const injectHead: () => HeadClient;
declare const createHead: (initHeadObject?: MaybeRef<HeadObjectPlain>) => HeadClient;
declare const useHead: (obj: MaybeRef<HeadObject>) => void;
declare const renderHeadToString: (head: HeadClient) => HTMLResult;
declare const Head: vue.DefineComponent<{}, () => null, {}, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<vue.ExtractPropTypes<{}>>, {}>;

export { HTMLResult, HandlesDuplicates, HasRenderPriority, Head, HeadAttrs, HeadClient, HeadObject, HeadObjectPlain, HeadTag, RendersInnerContent, RendersToBody, TagKeys, createHead, injectHead, renderHeadToString, useHead };

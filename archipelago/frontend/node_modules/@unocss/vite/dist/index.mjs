import UnocssInspector from '@unocss/inspector';
import { createHash } from 'crypto';
import { cssIdRE, createGenerator, BetterMap, toEscapedSelector } from '@unocss/core';
import { createFilter } from '@rollup/pluginutils';
import MagicString from 'magic-string';
import fs from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';
import { loadConfig } from '@unocss/config';

const defaultExclude = [cssIdRE];
const defaultInclude = [/\.vue$/, /\.vue\?vue/, /\.svelte$/, /\.[jt]sx$/, /\.mdx?$/, /\.astro$/, /\.elm$/];

const VIRTUAL_ENTRY_ALIAS = [
  /^(?:virtual:)?uno(?::(.+))?\.css(\?.*)?$/
];
const LAYER_MARK_ALL = "__ALL__";
function resolveId(id) {
  for (const alias of VIRTUAL_ENTRY_ALIAS) {
    const match = id.match(alias);
    if (match) {
      return match[1] ? {
        id: `/__uno_${match[1]}.css`,
        layer: match[1]
      } : {
        id: "/__uno.css",
        layer: LAYER_MARK_ALL
      };
    }
  }
}
const RESOLVED_ID_RE = /\/__uno(_.*?)?\.css$/;
const LAYER_PLACEHOLDER_RE = /(\\?")?#--unocss--\s*{\s*layer\s*:\s*(.+?);?\s*}/g;
function getLayerPlaceholder(layer) {
  return `#--unocss--{layer:${layer}}`;
}
const HASH_PLACEHOLDER_RE = /#--unocss-hash--\s*{\s*content\s*:\s*\\*"(.+?)\\*";?\s*}/g;
function getHashPlaceholder(hash) {
  return `#--unocss-hash--{content:"${hash}"}`;
}

const INCLUDE_COMMENT = "@unocss-include";
const IGNORE_COMMENT = "@unocss-ignore";
const CSS_PLACEHOLDER = "@unocss-placeholder";

function createContext(configOrPath, defaults = {}, extraConfigSources = [], resolveConfigResult = () => {
}) {
  let root = process.cwd();
  let rawConfig = {};
  const uno = createGenerator(rawConfig, defaults);
  let rollupFilter = createFilter(defaultInclude, defaultExclude);
  const invalidations = [];
  const modules = new BetterMap();
  const tokens = /* @__PURE__ */ new Set();
  let ready = reloadConfig();
  async function reloadConfig() {
    const result = await loadConfig(root, configOrPath, extraConfigSources);
    resolveConfigResult(result);
    rawConfig = result.config;
    uno.setConfig(rawConfig);
    uno.config.envMode = "dev";
    rollupFilter = createFilter(rawConfig.include || defaultInclude, rawConfig.exclude || defaultExclude);
    tokens.clear();
    await Promise.all(modules.map((code, id) => uno.applyExtractors(code, id, tokens)));
    invalidate();
    return result;
  }
  async function updateRoot(newRoot) {
    if (newRoot !== root) {
      root = newRoot;
      ready = reloadConfig();
    }
    return await ready;
  }
  function invalidate() {
    invalidations.forEach((cb) => cb());
  }
  async function extract(code, id) {
    if (id)
      modules.set(id, code);
    const len = tokens.size;
    await uno.applyExtractors(code, id, tokens);
    if (tokens.size > len)
      invalidate();
  }
  const filter = (code, id) => {
    if (code.includes(IGNORE_COMMENT))
      return false;
    return code.includes(INCLUDE_COMMENT) || code.includes(CSS_PLACEHOLDER) || rollupFilter(id);
  };
  async function getConfig() {
    await ready;
    return rawConfig;
  }
  return {
    get ready() {
      return ready;
    },
    tokens,
    modules,
    invalidate,
    onInvalidate(fn) {
      invalidations.push(fn);
    },
    filter,
    reloadConfig,
    uno,
    extract,
    getConfig,
    root,
    updateRoot
  };
}

function getPath(id) {
  return id.replace(/\?.*$/, "");
}

function getHash(input, length = 8) {
  return createHash("sha256").update(input).digest("hex").slice(0, length);
}

function replaceAsync(string, searchValue, replacer) {
  try {
    if (typeof replacer === "function") {
      const values = [];
      String.prototype.replace.call(string, searchValue, (...args) => {
        values.push(replacer(...args));
        return "";
      });
      return Promise.all(values).then((resolvedValues) => {
        return String.prototype.replace.call(string, searchValue, () => {
          return resolvedValues.shift() || "";
        });
      });
    } else {
      return Promise.resolve(String.prototype.replace.call(string, searchValue, replacer));
    }
  } catch (error) {
    return Promise.reject(error);
  }
}

function ChunkModeBuildPlugin({ uno, filter }) {
  let cssPlugin;
  const files = {};
  return {
    name: "unocss:chunk",
    apply: "build",
    enforce: "pre",
    configResolved(config) {
      cssPlugin = config.plugins.find((i) => i.name === "vite:css-post");
    },
    transform(code, id) {
      if (!filter(code, id))
        return;
      files[id] = code;
      return null;
    },
    async renderChunk(_, chunk) {
      const chunks = Object.keys(chunk.modules).map((i) => files[i]).filter(Boolean);
      if (!chunks.length)
        return null;
      const tokens = /* @__PURE__ */ new Set();
      await Promise.all(chunks.map((c) => uno.applyExtractors(c, void 0, tokens)));
      const { css } = await uno.generate(tokens);
      const fakeCssId = `${chunk.fileName}.css`;
      await cssPlugin.transform(css, fakeCssId);
      chunk.modules[fakeCssId] = {
        code: null,
        originalLength: 0,
        removedExports: [],
        renderedExports: [],
        renderedLength: 0
      };
      return null;
    },
    async transformIndexHtml(code) {
      const { css } = await uno.generate(code);
      if (css)
        return `${code}<style>${css}</style>`;
    }
  };
}

function GlobalModeBuildPlugin({ uno, ready, extract, tokens, modules, filter, getConfig }) {
  const vfsLayerMap = /* @__PURE__ */ new Map();
  const layerImporterMap = /* @__PURE__ */ new Map();
  let tasks = [];
  let cssPostPlugin;
  let cssPlugin;
  async function transformCSS(css, id) {
    const {
      postcss = true
    } = await getConfig();
    if (!cssPlugin || !postcss)
      return css;
    const result = await cssPlugin.transform(css, id);
    if (!result)
      return css;
    if (typeof result === "string")
      css = result;
    else if (result.code)
      css = result.code;
    css = css.replace(/[\n\r]/g, "");
    return css;
  }
  return [
    {
      name: "unocss:global:build:scan",
      apply: "build",
      enforce: "pre",
      buildStart() {
        tasks = [];
      },
      transform(code, id) {
        if (filter(code, id))
          tasks.push(extract(code, id));
        return null;
      },
      transformIndexHtml: {
        enforce: "pre",
        transform(code, { filename }) {
          tasks.push(extract(code, filename));
        }
      },
      resolveId(id, importer) {
        const entry = resolveId(id);
        if (entry) {
          vfsLayerMap.set(entry.id, entry.layer);
          if (importer)
            layerImporterMap.set(importer, entry.id);
          return entry.id;
        }
      },
      load(id) {
        const layer = vfsLayerMap.get(getPath(id));
        if (layer)
          return getLayerPlaceholder(layer);
      },
      moduleParsed({ id, importedIds }) {
        if (!layerImporterMap.has(id))
          return;
        const layerKey = layerImporterMap.get(id);
        if (!importedIds.includes(layerKey)) {
          layerImporterMap.delete(id);
          vfsLayerMap.delete(layerKey);
        }
      },
      async configResolved(config) {
        cssPostPlugin = config.plugins.find((i) => i.name === "vite:css-post");
        cssPlugin = config.plugins.find((i) => i.name === "vite:css");
        await ready;
      },
      async renderChunk(_, chunk) {
        if (!cssPostPlugin)
          return null;
        const chunks = Object.keys(chunk.modules).filter((i) => modules.has(i));
        if (!chunks.length)
          return null;
        const fakeCssId = `${chunk.fileName}-unocss-hash.css`;
        const tokens2 = /* @__PURE__ */ new Set();
        await Promise.all(chunks.map((c) => uno.applyExtractors(modules.get(c) || "", c, tokens2)));
        let { css } = await uno.generate(tokens2, { minify: true });
        if (!css)
          return null;
        if (!Object.keys(chunk.modules).some((i) => i.match(RESOLVED_ID_RE)))
          return null;
        css = await transformCSS(css, fakeCssId);
        const hash = getHash(css);
        await cssPostPlugin.transform(getHashPlaceholder(hash), fakeCssId);
        chunk.modules[fakeCssId] = {
          code: null,
          originalLength: 0,
          removedExports: [],
          renderedExports: [],
          renderedLength: 0
        };
        return null;
      }
    },
    {
      name: "unocss:global:build:generate",
      apply(options, { command }) {
        return command === "build" && !options.build?.ssr;
      },
      enforce: "post",
      async generateBundle(_, bundle) {
        const files = Object.keys(bundle);
        const cssFiles = files.filter((i) => i.endsWith(".css"));
        if (!cssFiles.length)
          return;
        if (!vfsLayerMap.size) {
          const msg = "[unocss] entry module not found, have you add `import 'uno.css'` in your main entry?";
          this.warn(msg);
          return;
        }
        await Promise.all(tasks);
        const result = await uno.generate(tokens, { minify: true });
        let replaced = false;
        for (const file of cssFiles) {
          const chunk = bundle[file];
          if (chunk.type === "asset" && typeof chunk.source === "string") {
            const css = chunk.source.replace(HASH_PLACEHOLDER_RE, "");
            chunk.source = await replaceAsync(css, LAYER_PLACEHOLDER_RE, async (_2, __, layer) => {
              replaced = true;
              return await transformCSS(layer === LAYER_MARK_ALL ? result.getLayers(void 0, Array.from(vfsLayerMap.values())) : result.getLayer(layer) || "", `${chunk.fileName}.css`);
            });
          }
        }
        if (!replaced)
          this.error(new Error("[unocss] does not found CSS placeholder in the generated chunks,\nthis is likely an internal bug of unocss vite plugin"));
      }
    }
  ];
}

const WARN_TIMEOUT = 2e4;
const WS_EVENT_PREFIX = "unocss:hmr";
function GlobalModeDevPlugin({ uno, tokens, onInvalidate, extract, filter }) {
  const servers = [];
  let base = "";
  const tasks = [];
  const entries = /* @__PURE__ */ new Map();
  let invalidateTimer;
  let lastUpdate = Date.now();
  let lastServed = 0;
  let resolved = false;
  let resolvedWarnTimer;
  function configResolved(config) {
    base = config.base || "";
    if (base === "/")
      base = "";
    else if (base.endsWith("/"))
      base = base.slice(0, base.length - 1);
  }
  function invalidate(timer = 10) {
    for (const server of servers) {
      for (const id of entries.keys()) {
        const mod = server.moduleGraph.getModuleById(id);
        if (!mod)
          continue;
        server.moduleGraph.invalidateModule(mod);
      }
    }
    clearTimeout(invalidateTimer);
    invalidateTimer = setTimeout(sendUpdate, timer);
  }
  function sendUpdate() {
    lastUpdate = Date.now();
    for (const server of servers) {
      server.ws.send({
        type: "update",
        updates: Array.from(entries.keys()).map((i) => ({
          acceptedPath: i,
          path: i,
          timestamp: lastUpdate,
          type: "js-update"
        }))
      });
    }
  }
  function setWarnTimer() {
    if (!resolved && !resolvedWarnTimer) {
      resolvedWarnTimer = setTimeout(() => {
        if (process.env.TEST || process.env.NODE_ENV === "test")
          return;
        if (!resolved) {
          const msg = "[unocss] entry module not found, have you add `import 'uno.css'` in your main entry?";
          console.warn(msg);
          servers.forEach(({ ws }) => ws.send({
            type: "error",
            err: { message: msg, stack: "" }
          }));
        }
      }, WARN_TIMEOUT);
    }
  }
  onInvalidate(invalidate);
  return [
    {
      name: "unocss:global",
      apply: "serve",
      enforce: "pre",
      configResolved,
      async configureServer(_server) {
        servers.push(_server);
        _server.ws.on(WS_EVENT_PREFIX, (servedTime) => {
          if (servedTime < lastUpdate)
            invalidate(0);
        });
      },
      async buildStart() {
        await uno.generate("", { preflights: true });
      },
      transform(code, id) {
        if (filter(code, id))
          extract(code, id);
        return null;
      },
      transformIndexHtml: {
        enforce: "pre",
        transform(code, { filename }) {
          setWarnTimer();
          extract(code, filename);
        }
      },
      resolveId(id) {
        const entry = resolveId(id);
        if (entry) {
          resolved = true;
          entries.set(entry.id, entry.layer);
          return entry.id;
        }
      },
      async load(id) {
        const layer = entries.get(getPath(id));
        if (!layer)
          return null;
        await Promise.all(tasks);
        const result = await uno.generate(tokens);
        lastServed = Date.now();
        return layer === LAYER_MARK_ALL ? result.getLayers(void 0, Array.from(entries.values())) : result.getLayer(layer);
      }
    },
    {
      name: "unocss:global:post",
      configResolved,
      apply(config, env) {
        return env.command === "serve" && !config.build?.ssr;
      },
      enforce: "post",
      transform(code, id) {
        if (entries.has(getPath(id)) && code.includes("import.meta.hot")) {
          const snippet = `
if (import.meta.hot) { try { import.meta.hot.send('${WS_EVENT_PREFIX}', ${lastServed}) } catch (e) { console.warn('[unocss-hmr]', e) } }`;
          return code + snippet;
        }
      }
    }
  ];
}

function GlobalModePlugin(ctx) {
  return [
    ...GlobalModeBuildPlugin(ctx),
    ...GlobalModeDevPlugin(ctx)
  ];
}

const VIRTUAL_PREFIX = "/@unocss/";
const SCOPE_IMPORT_RE = / from (['"])(@unocss\/scope)\1/;
function PerModuleModePlugin({ uno, filter }) {
  const moduleMap = /* @__PURE__ */ new Map();
  let server;
  const invalidate = (hash) => {
    if (!server)
      return;
    const id = `${VIRTUAL_PREFIX}${hash}.css`;
    const mod = server.moduleGraph.getModuleById(id);
    if (!mod)
      return;
    server.moduleGraph.invalidateModule(mod);
    server.ws.send({
      type: "update",
      updates: [{
        acceptedPath: id,
        path: id,
        timestamp: +Date.now(),
        type: "js-update"
      }]
    });
  };
  return {
    name: "unocss:module-scope",
    enforce: "post",
    configureServer(_server) {
      server = _server;
    },
    async transform(code, id) {
      if (!filter(code, id))
        return;
      const hash = getHash(id);
      const hasScope = code.match(SCOPE_IMPORT_RE);
      const { css } = await uno.generate(code, { id, scope: hasScope ? `.${hash}` : void 0, preflights: false });
      if (!css && !hasScope)
        return null;
      if (hasScope)
        code = code.replace(SCOPE_IMPORT_RE, ` from 'data:text/javascript;base64,${Buffer.from(`export default () => "${hash}"`).toString("base64")}'`);
      moduleMap.set(hash, [id, css]);
      invalidate(hash);
      return {
        code: `import "${VIRTUAL_PREFIX}${hash}.css";${code}`,
        map: null
      };
    },
    resolveId(id) {
      return id.startsWith(VIRTUAL_PREFIX) ? id : null;
    },
    load(id) {
      if (!id.startsWith(VIRTUAL_PREFIX))
        return null;
      const hash = id.slice(VIRTUAL_PREFIX.length, -".css".length);
      const [source, css] = moduleMap.get(hash) || [];
      if (source)
        this.addWatchFile(source);
      return `
/* unocss ${source} */
${css}`;
    }
  };
}

function VueScopedPlugin({ uno, ready }) {
  let filter = createFilter([/\.vue$/], defaultExclude);
  async function transformSFC(code) {
    const { css } = await uno.generate(code);
    if (!css)
      return null;
    return `${code}
<style scoped>${css}</style>`;
  }
  return {
    name: "unocss:vue-scoped",
    enforce: "pre",
    async configResolved() {
      const { config } = await ready;
      filter = createFilter(config.include || [/\.vue$/], config.exclude || defaultExclude);
    },
    transform(code, id) {
      if (!filter(id))
        return;
      return transformSFC(code);
    },
    handleHotUpdate(ctx) {
      const read = ctx.read;
      if (filter(ctx.file)) {
        ctx.read = async () => {
          const code = await read();
          return await transformSFC(code) || code;
        };
      }
    }
  };
}

function SvelteScopedPlugin({ uno, ready }) {
  let filter = createFilter([/\.svelte$/], defaultExclude);
  async function transformSFC(code) {
    const { css } = await uno.generate(code);
    if (!css)
      return null;
    if (code.match(/<style[^>]*>[\s\S]*?<\/style\s*>/))
      return code.replace(/(<style[^>]*>)/, `$1${css}`);
    return `${code}
<style>${css}</style>`;
  }
  return {
    name: "unocss:svelte-scoped",
    enforce: "pre",
    async configResolved() {
      const { config } = await ready;
      filter = createFilter(config.include || [/\.svelte$/], config.exclude || defaultExclude);
    },
    transform(code, id) {
      if (!filter(id))
        return;
      return transformSFC(code);
    },
    handleHotUpdate(ctx) {
      const read = ctx.read;
      if (filter(ctx.file)) {
        ctx.read = async () => {
          const code = await read();
          return await transformSFC(code) || code;
        };
      }
    }
  };
}

function ShadowDomModuleModePlugin({ uno }) {
  const partExtractorRegex = /^part-\[(.+)]:/;
  const nameRegexp = /<([^\s^!>]+)\s*([^>]*)>/;
  const checkElement = (useParts, idxResolver, element) => {
    if (!element)
      return null;
    const applyParts = useParts.filter((p) => element[2].includes(p.rule));
    if (applyParts.length === 0)
      return null;
    const name = element[1];
    const idx = idxResolver(name);
    return {
      name,
      entries: applyParts.map(({ rule, part }) => [
        `.${rule.replace(/[:[\]]/g, "\\$&")}::part(${part})`,
        `${name}:nth-of-type(${idx})::part(${part})`
      ])
    };
  };
  const idxMapFactory = () => {
    const elementIdxMap = /* @__PURE__ */ new Map();
    return {
      idxResolver: (name) => {
        let idx = elementIdxMap.get(name);
        if (!idx) {
          idx = 1;
          elementIdxMap.set(name, idx);
        }
        return idx;
      },
      incrementIdx: (name) => {
        elementIdxMap.set(name, elementIdxMap.get(name) + 1);
      }
    };
  };
  const transformWebComponent = async (code) => {
    if (!code.match(CSS_PLACEHOLDER))
      return code;
    let { css, matched } = await uno.generate(code, { preflights: false });
    if (css && matched) {
      const useParts = Array.from(matched).reduce((acc, rule) => {
        const matcher = rule.match(partExtractorRegex);
        if (matcher)
          acc.push({ part: matcher[1], rule });
        return acc;
      }, new Array());
      if (useParts.length > 0) {
        let useCode = code;
        let element;
        const partsToApply = /* @__PURE__ */ new Map();
        const { idxResolver, incrementIdx } = idxMapFactory();
        while (element = nameRegexp.exec(useCode)) {
          const result = checkElement(useParts, idxResolver, element);
          if (result) {
            result.entries.forEach(([name, replacement]) => {
              let list = partsToApply.get(name);
              if (!list) {
                list = [];
                partsToApply.set(name, list);
              }
              list.push(replacement);
            });
            incrementIdx(result.name);
          }
          useCode = useCode.slice(element[0].length + 1);
        }
        if (partsToApply.size > 0) {
          css = Array.from(partsToApply.entries()).reduce((k, [r, name]) => {
            return k.replace(r, name.join(",\n"));
          }, css);
        }
      }
    }
    return code.replace(CSS_PLACEHOLDER, css?.replace(/\\/g, "\\\\") ?? "");
  };
  return {
    name: "unocss:shadow-dom",
    enforce: "pre",
    async transform(code) {
      return transformWebComponent(code);
    },
    handleHotUpdate(ctx) {
      const read = ctx.read;
      ctx.read = async () => {
        const code = await read();
        return await transformWebComponent(code);
      };
    }
  };
}

function ConfigHMRPlugin(ctx) {
  const { ready, uno } = ctx;
  return {
    name: "unocss:config",
    async configResolved(config) {
      await ctx.updateRoot(config.root);
    },
    async configureServer(server) {
      uno.config.envMode = "dev";
      const { sources } = await ready;
      if (!sources.length)
        return;
      server.watcher.add(sources);
      server.watcher.on("change", async (p) => {
        if (!sources.includes(p))
          return;
        await ctx.reloadConfig();
        server.ws.send({
          type: "custom",
          event: "unocss:config-changed"
        });
      });
    }
  };
}

function initTransformerPlugins(ctx) {
  async function applyTransformers(code, id, enforce) {
    if (code.includes(IGNORE_COMMENT))
      return;
    const transformers = (ctx.uno.config.transformers || []).filter((i) => i.enforce === enforce);
    if (!transformers.length)
      return;
    const s = new MagicString(code);
    for (const t of transformers) {
      if (t.idFilter) {
        if (!t.idFilter(id))
          continue;
      } else if (!ctx.filter(code, id)) {
        continue;
      }
      await t.transform(s, id, ctx);
    }
    if (s.hasChanged()) {
      return {
        code: s.toString(),
        map: s.generateMap({ hires: true, source: id })
      };
    }
  }
  return [
    {
      name: "unocss:transformers:default",
      transform(code, id) {
        return applyTransformers(code, id);
      },
      transformIndexHtml(code) {
        return applyTransformers(code, "index.html").then((t) => t?.code);
      }
    },
    {
      name: "unocss:transformers:pre",
      enforce: "pre",
      transform(code, id) {
        return applyTransformers(code, id, "pre");
      },
      transformIndexHtml(code) {
        return applyTransformers(code, "index.html", "pre").then((t) => t?.code);
      }
    },
    {
      name: "unocss:transformers:post",
      enforce: "post",
      transform(code, id) {
        return applyTransformers(code, id, "post");
      },
      transformIndexHtml(code) {
        applyTransformers(code, "index.html", "post").then((t) => t?.code);
      }
    }
  ];
}

const _dirname = typeof __dirname !== "undefined" ? __dirname : dirname(fileURLToPath(import.meta.url));
const DEVTOOLS_MODULE_ID = "virtual:unocss-devtools";
const MOCK_CLASSES_MODULE_ID = "virtual:unocss-mock-classes";
const MOCK_CLASSES_PATH = "/@unocss/mock-classes";
const DEVTOOLS_PATH = "/@unocss/devtools";
const DEVTOOLS_CSS_PATH = "/@unocss/devtools.css";
const devtoolCss = /* @__PURE__ */ new Set();
const MODULES_MAP = {
  [DEVTOOLS_MODULE_ID]: DEVTOOLS_PATH,
  [MOCK_CLASSES_MODULE_ID]: MOCK_CLASSES_PATH
};
const POST_PATH = "/@unocss-devtools-update";
function getBodyJson(req) {
  return new Promise((resolve2, reject) => {
    let body = "";
    req.on("data", (chunk) => body += chunk);
    req.on("error", reject);
    req.on("end", () => {
      try {
        resolve2(JSON.parse(body) || {});
      } catch (e) {
        reject(e);
      }
    });
  });
}
function createDevtoolsPlugin(ctx) {
  let config;
  let server;
  let clientCode = "";
  let devtoolTimer;
  let lastUpdate = Date.now();
  function toClass(name) {
    return `${toEscapedSelector(name)}{}`;
  }
  function updateDevtoolClass() {
    clearTimeout(devtoolTimer);
    devtoolTimer = setTimeout(() => {
      lastUpdate = Date.now();
      if (!server)
        return;
      const mod = server.moduleGraph.getModuleById(DEVTOOLS_CSS_PATH);
      if (!mod)
        return;
      server.moduleGraph.invalidateModule(mod);
      server.ws.send({
        type: "update",
        updates: [{
          acceptedPath: DEVTOOLS_CSS_PATH,
          path: DEVTOOLS_CSS_PATH,
          timestamp: lastUpdate,
          type: "js-update"
        }]
      });
    }, 100);
  }
  async function getMockClassesInjector() {
    const suggest = Object.keys(ctx.uno.config.rulesStaticMap);
    const comment = "/* unocss CSS mock class names for devtools auto-completion */\n";
    const css = suggest.map(toClass).join("");
    return `
  const style = document.createElement('style')
  style.setAttribute('type', 'text/css')
  style.innerHTML = ${JSON.stringify(comment + css)}
  document.head.prepend(style)
  `;
  }
  return [
    {
      name: "unocss:devtools",
      configResolved(_config) {
        config = _config;
      },
      configureServer(_server) {
        server = _server;
        server.middlewares.use(async (req, res, next) => {
          if (req.url !== POST_PATH)
            return next();
          try {
            const data = await getBodyJson(req);
            const type = data?.type;
            let changed = false;
            switch (type) {
              case "add-classes":
                data.data.forEach((key) => {
                  if (!devtoolCss.has(key)) {
                    devtoolCss.add(key);
                    changed = true;
                  }
                });
                if (changed)
                  updateDevtoolClass();
            }
            res.statusCode = 200;
          } catch (e) {
            console.error(e);
            res.statusCode = 500;
          }
          res.end();
        });
      },
      resolveId(id) {
        if (id === DEVTOOLS_CSS_PATH)
          return DEVTOOLS_CSS_PATH;
        return MODULES_MAP[id];
      },
      async load(id) {
        if (id === DEVTOOLS_PATH) {
          if (!clientCode) {
            clientCode = [
              await fs.promises.readFile(resolve(_dirname, "client.mjs"), "utf-8"),
              `import('${MOCK_CLASSES_MODULE_ID}')`,
              `import('${DEVTOOLS_CSS_PATH}')`
            ].join("\n").replace("__POST_PATH__", (config.server?.origin ?? "") + POST_PATH);
          }
          return config.command === "build" ? "" : clientCode;
        } else if (id === MOCK_CLASSES_PATH) {
          return await getMockClassesInjector();
        } else if (id === DEVTOOLS_CSS_PATH) {
          const { css } = await ctx.uno.generate(devtoolCss);
          return css;
        }
      }
    }
  ];
}

function defineConfig(config) {
  return config;
}
function UnocssPlugin(configOrPath, defaults = {}) {
  const ctx = createContext(configOrPath, defaults);
  const inlineConfig = configOrPath && typeof configOrPath !== "string" ? configOrPath : {};
  const mode = inlineConfig.mode ?? "global";
  const plugins = [
    ConfigHMRPlugin(ctx),
    ...initTransformerPlugins(ctx),
    ...createDevtoolsPlugin(ctx)
  ];
  if (inlineConfig.inspector !== false)
    plugins.push(UnocssInspector(ctx));
  if (mode === "per-module") {
    plugins.push(PerModuleModePlugin(ctx));
  } else if (mode === "vue-scoped") {
    plugins.push(VueScopedPlugin(ctx));
  } else if (mode === "svelte-scoped") {
    plugins.push(SvelteScopedPlugin(ctx));
  } else if (mode === "shadow-dom") {
    plugins.push(ShadowDomModuleModePlugin(ctx));
  } else if (mode === "global") {
    plugins.push(...GlobalModePlugin(ctx));
  } else if (mode === "dist-chunk") {
    plugins.push(ChunkModeBuildPlugin(ctx), ...GlobalModeDevPlugin(ctx));
  } else {
    throw new Error(`[unocss] unknown mode "${mode}"`);
  }
  return plugins.filter(Boolean);
}

export { ChunkModeBuildPlugin, GlobalModeBuildPlugin, GlobalModeDevPlugin, GlobalModePlugin, PerModuleModePlugin, SvelteScopedPlugin, VueScopedPlugin, UnocssPlugin as default, defineConfig };
